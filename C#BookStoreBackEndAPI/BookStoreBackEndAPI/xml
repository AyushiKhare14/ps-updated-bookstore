<?xml version="1.0"?>
<doc>
    <assembly>
        <name>C#BookStoreBackEndAPI</name>
    </assembly>
    <members>
        <member name="T:C_BookStoreBackEndAPI.Controllers.GenreController">
            <summary>
            Genre Controller
            </summary>
        </member>
        <member name="M:C_BookStoreBackEndAPI.Controllers.GenreController.#ctor(C_BookStoreBackEndAPI.Services.Interfaces.IGenreService)">
            <summary>
            Genre Controller
            </summary>
            <param name="genreService"></param>
        </member>
        <member name="M:C_BookStoreBackEndAPI.Controllers.GenreController.GetAllAsync">
            <summary>
            Get all the genres in BookStore DB
            </summary>
            <returns>List of all the Genres.</returns>
        </member>
        <member name="M:C_BookStoreBackEndAPI.Controllers.GenreController.GetByIdAsync(System.Int32)">
            <summary>
            Get Genre by genre id.
            </summary>
            <param name="genreId">Genre Id</param>
            <returns>Genre</returns>
        </member>
        <member name="M:C_BookStoreBackEndAPI.Controllers.GenreController.CreateAsync(C_BookStoreBackEndAPI.Dtos.Genre.CreateGenreDto)">
            <summary>
            Create Genre from the request body
            </summary>
            <param name="createGenreDto">Create genre request body</param>
            <returns></returns>
        </member>
        <member name="M:C_BookStoreBackEndAPI.Controllers.GenreController.UpdateAsync(System.Int32,C_BookStoreBackEndAPI.Dtos.Genre.UpdateGenreDto)">
            <summary>
            Update genre from the object in the request body 
            </summary>
            <param name="genreId">Genre Id</param>
            <param name="updateGenreDto">Update genre request body</param>
            <returns></returns>
        </member>
        <member name="M:C_BookStoreBackEndAPI.Controllers.GenreController.DeleteAsync(System.Int32)">
            <summary>
            Delete Genre for given genre id.
            </summary>
            <param name="genreId"></param>
            <returns></returns>
        </member>
        <member name="T:C_BookStoreBackEndAPI.Migrations.BookStoreV1">
            <inheritdoc />
        </member>
        <member name="M:C_BookStoreBackEndAPI.Migrations.BookStoreV1.Up(Microsoft.EntityFrameworkCore.Migrations.MigrationBuilder)">
            <inheritdoc />
        </member>
        <member name="M:C_BookStoreBackEndAPI.Migrations.BookStoreV1.Down(Microsoft.EntityFrameworkCore.Migrations.MigrationBuilder)">
            <inheritdoc />
        </member>
        <member name="M:C_BookStoreBackEndAPI.Migrations.BookStoreV1.BuildTargetModel(Microsoft.EntityFrameworkCore.ModelBuilder)">
            <inheritdoc />
        </member>
        <member name="T:C_BookStoreBackEndAPI.Repositories.GenreRepository">
            <summary>
            Class defining methods for performing CRUD operations on Genre Table
            </summary>
        </member>
        <member name="M:C_BookStoreBackEndAPI.Repositories.GenreRepository.#ctor(C_BookStoreBackEndAPI.Data.BookStoreDBContext)">
            <summary>
            Constructor with Db Context object
            </summary>
            <param name="context">Db Context object passed using DI</param>
        </member>
        <member name="M:C_BookStoreBackEndAPI.Repositories.GenreRepository.CreateAsync(C_BookStoreBackEndAPI.Models.Genre)">
            <inheritdoc/>
        </member>
        <member name="M:C_BookStoreBackEndAPI.Repositories.GenreRepository.DeleteAsync(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:C_BookStoreBackEndAPI.Repositories.GenreRepository.GetAllAsync">
            <inheritdoc/>
        </member>
        <member name="M:C_BookStoreBackEndAPI.Repositories.GenreRepository.GetByIdAsync(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:C_BookStoreBackEndAPI.Repositories.GenreRepository.UpdateAsync(System.Int32,C_BookStoreBackEndAPI.Models.Genre)">
            <inheritdoc/>
        </member>
        <member name="T:C_BookStoreBackEndAPI.Repositories.Interfaces.IGenreRepository">
            <summary>
            Interface declaring methods for performing CRUD operations on Genre Table
            </summary>
        </member>
        <member name="M:C_BookStoreBackEndAPI.Repositories.Interfaces.IGenreRepository.GetAllAsync">
            <summary>
            Retrieve all genere
            </summary>
            <returns>Returns all genres</returns>
        </member>
        <member name="M:C_BookStoreBackEndAPI.Repositories.Interfaces.IGenreRepository.GetByIdAsync(System.Int32)">
            <summary>
            Retrieve a genere by its id
            </summary>
            <param name="genreId">GenreId for genre to be fetched</param>
            <returns>Returns genre if found else returns null</returns>
        </member>
        <member name="M:C_BookStoreBackEndAPI.Repositories.Interfaces.IGenreRepository.CreateAsync(C_BookStoreBackEndAPI.Models.Genre)">
            <summary>
            Creates a new genre
            </summary>
            <param name="genre">Genre to be created</param>
            <returns>Returns newly generated genre id</returns>
        </member>
        <member name="M:C_BookStoreBackEndAPI.Repositories.Interfaces.IGenreRepository.UpdateAsync(System.Int32,C_BookStoreBackEndAPI.Models.Genre)">
            <summary>
            Updates genre by Id
            </summary>
            <param name="genreId">Genre Id to be updated</param>
            <param name="genre">Updated genre</param>
            <returns>Return number of genre gets updated.</returns>
        </member>
        <member name="M:C_BookStoreBackEndAPI.Repositories.Interfaces.IGenreRepository.DeleteAsync(System.Int32)">
            <summary>
            Deletes a genre
            </summary>
            <param name="genreId">GenreId for the genre which is expected to get delete</param>
            <returns>Returns bool value indicating success status of deleteing genre</returns>
        </member>
        <member name="T:C_BookStoreBackEndAPI.Services.GenreService">
            <summary>
            Class implementing methods for performing CRUD operations using Genre Repository
            </summary>
        </member>
        <member name="M:C_BookStoreBackEndAPI.Services.GenreService.#ctor(C_BookStoreBackEndAPI.Repositories.Interfaces.IGenreRepository,AutoMapper.IMapper)">
            <summary>
            Constructor
            </summary>
            <param name="genreRepository">Genre Repository object</param>
            <param name="mapper">Mapper object</param>
        </member>
        <member name="M:C_BookStoreBackEndAPI.Services.GenreService.CreateAsync(C_BookStoreBackEndAPI.Dtos.Genre.CreateGenreDto)">
            <inheritdoc/>
        </member>
        <member name="M:C_BookStoreBackEndAPI.Services.GenreService.DeleteAsync(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:C_BookStoreBackEndAPI.Services.GenreService.GetAllAsync">
            <inheritdoc/>
        </member>
        <member name="M:C_BookStoreBackEndAPI.Services.GenreService.GetByIdAsync(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:C_BookStoreBackEndAPI.Services.GenreService.UpdateAsync(System.Int32,C_BookStoreBackEndAPI.Dtos.Genre.UpdateGenreDto)">
            <inheritdoc/>
        </member>
        <member name="T:C_BookStoreBackEndAPI.Services.Interfaces.IGenreService">
            <summary>
            Interface declaring methods for performing CRUD operations using Genre Repository
            </summary>
        </member>
        <member name="M:C_BookStoreBackEndAPI.Services.Interfaces.IGenreService.GetAllAsync">
            <summary>
            Retrieve all genere
            </summary>
            <returns>Returns all genere</returns>
        </member>
        <member name="M:C_BookStoreBackEndAPI.Services.Interfaces.IGenreService.GetByIdAsync(System.Int32)">
            <summary>
            Retrieve a genere by its id
            </summary>
            <param name="genreId">GenreId for genre to be fetched</param>
            <returns>Returns genre if found else returns null</returns>
        </member>
        <member name="M:C_BookStoreBackEndAPI.Services.Interfaces.IGenreService.CreateAsync(C_BookStoreBackEndAPI.Dtos.Genre.CreateGenreDto)">
            <summary>
            Creates a new genre
            </summary>
            <param name="genreDto">Genre to be created</param>
            <returns>Returns newly generated genre id</returns>
        </member>
        <member name="M:C_BookStoreBackEndAPI.Services.Interfaces.IGenreService.UpdateAsync(System.Int32,C_BookStoreBackEndAPI.Dtos.Genre.UpdateGenreDto)">
            <summary>
            Updates genre by Id
            </summary>
            <param name="genreId">Genre Id to be updated</param>
            <param name="genreDto">Updated genre</param>
            <returns>Return number of genre gets updated.</returns>
        </member>
        <!-- Badly formed XML comment ignored for member "M:C_BookStoreBackEndAPI.Services.Interfaces.IGenreService.DeleteAsync(System.Int32)" -->
    </members>
</doc>
